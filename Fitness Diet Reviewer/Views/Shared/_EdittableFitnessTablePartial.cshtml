@model Fitness_Diet_Reviewer.ViewModels.AccountViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{
    var currUserSearch = await UserManager.FindByNameAsync(User.Identity.Name);
}

<div id="fitness-diet" class="card shadow mb-2">
    <div class="card-header py-3 d-flex justify-content-between">
        @if (User.IsInRole("Administrator") && Model.FitnessDiet.UserId != currUserSearch.Id)
        {
            <p class="text-primary m-0 fw-bold">
                @Model.ApplicationUser.UserName
                - Fitness Diet
            </p>
        }
        else
        {
            <p class="text-primary m-0 fw-bold">
                Your personal fitness diet
            </p>
        }

       <div id="statusIndicator"></div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Replace with the actual id of the FitnessDiet
            const fitnessDietId = '@Model.FitnessDiet.DietId';
            updateStatusIndicator(fitnessDietId); // Initial call to fetch and update status indicator
        });

        function updateStatusIndicator(fitnessDietId) {
            fetch(`/Accounts/GetStatusIndicatorData?id=${fitnessDietId}`)
                .then(response => response.json())
                .then(data => {
                    const statusIndicatorContainer = document.getElementById('statusIndicator');
                    statusIndicatorContainer.innerHTML = ''; // Clear previous content

                    console.log(data);
                    if (data.isReviewed) {
                        const reviewedDiv = document.createElement('div');
                        reviewedDiv.classList.add('d-flex', 'align-items-center');
                        reviewedDiv.innerHTML = `
                            <div class="bg-success rounded-circle me-2" style="width: 10px; height: 10px;"></div>
                            <p class="m-0 text-end">Reviewed</p>
                        `;
                        statusIndicatorContainer.appendChild(reviewedDiv);
                    } else if (data.status === 'NotReady') {
                        // Render Not Ready status with form
                        const notReadyDiv = document.createElement('div');
                        notReadyDiv.classList.add('d-flex', 'align-items-center');
                        notReadyDiv.innerHTML = `
                            <div class="bg-danger rounded-circle me-2" style="width: 10px; height: 10px;"></div>
                            <form id="statusForm" method="post" action="/Accounts/ChangeStatus">
                                <input type="hidden" name="id" value="${data.dietId}">
                                <select id="statusDropdown" name="newStatus">
                                    <option value="NotReady" selected>Not ready for review</option>
                                    <option value="PendingFeedback">Pending Feedback</option>
                                </select>
                            </form>
                        `;
                        statusIndicatorContainer.appendChild(notReadyDiv);
                    } else if (data.status === 'PendingFeedback') {
                        // Render Pending Feedback status with form
                        const pendingFeedbackDiv = document.createElement('div');
                        pendingFeedbackDiv.classList.add('d-flex', 'align-items-center');
                        pendingFeedbackDiv.innerHTML = `
                            <div class="bg-warning rounded-circle me-2" style="width: 10px; height: 10px;"></div>
                            <form id="statusForm" method="post" action="/Accounts/ChangeStatus">
                                <input type="hidden" name="id" value="${data.dietId}">
                                <select id="statusDropdown" name="newStatus">
                                    <option value="NotReady">Not ready for review</option>
                                    <option value="PendingFeedback" selected>Pending Feedback</option>
                                </select>
                            </form>
                        `;
                        statusIndicatorContainer.appendChild(pendingFeedbackDiv);
                    }
                })
                .catch(error => {
                    console.error('Error fetching status indicator data:', error);
                });
        }

    </script>
    <div class="card-body">
        <link rel="stylesheet" href="~/css/table.css" />


        <div class="container">
            <table class="rounded">
                <thead>
                    <tr>
                        <th scope="col">Time</th>
                        <th scope="col">Monday</th>
                        <th scope="col">Tuesday</th>
                        <th scope="col">Wednesday</th>
                        <th scope="col">Thursday</th>
                        <th scope="col">Friday</th>
                        <th scope="col">Saturday</th>
                        <th scope="col">Sunday</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var group in Model.FitnessDiet.DailyMealRows.OrderBy(x => x.EatTime).GroupBy(t => t.EatTime))
                    {
                        <tr class="schedule-row">
                            <th scope="row">@group.Key</th>

                            @for (int i = 0; i < 7; i++)
                            {
                                //DailyMealRow rowItem2 = new DailyMealRow();
                                bool hasSecondItem = group.Where(x => x.DayOfWeek == Model.DaysOfWeek[i]).Count() > 1;
                                DailyMealRow rowItem2 = new DailyMealRow();
                                if (hasSecondItem)
                                {
                                    rowItem2 = group.Where(x => x.DayOfWeek == Model.DaysOfWeek[i]).ToArray()[1];
                                }
                                var rowItem = group.FirstOrDefault(x => x.DayOfWeek == Model.DaysOfWeek[i]);


                                if (rowItem != null)
                                {
                                    Model.CaloriesPerDay[Model.DaysOfWeek[i]] += ((rowItem.Product.Proteins * (rowItem.AmountInGrams / 100) * 4) +
                                    (rowItem.Product.Fats * (rowItem.AmountInGrams / 100) * 9) + (rowItem.Product.Carbohydrates * (rowItem.AmountInGrams / 100) * 4));
                                    Model.ProteinsPerDay[Model.DaysOfWeek[i]] += rowItem.Product.Proteins * (rowItem.AmountInGrams / 100);
                                    Model.FatsPerDay[Model.DaysOfWeek[i]] += rowItem.Product.Fats * (rowItem.AmountInGrams / 100);
                                    Model.CarbohydratesPerDay[Model.DaysOfWeek[i]] += rowItem.Product.Carbohydrates * (rowItem.AmountInGrams / 100);


                                    if (hasSecondItem)
                                    {
                                        Model.CaloriesPerDay[Model.DaysOfWeek[i]] += ((rowItem2.Product.Proteins * (rowItem2.AmountInGrams / 100) * 4) +
                                        (rowItem2.Product.Fats * (rowItem2.AmountInGrams / 100) * 9) + (rowItem2.Product.Carbohydrates * (rowItem2.AmountInGrams / 100) * 4));
                                        Model.ProteinsPerDay[Model.DaysOfWeek[i]] += rowItem2.Product.Proteins * (rowItem2.AmountInGrams / 100);
                                        Model.FatsPerDay[Model.DaysOfWeek[i]] += rowItem2.Product.Fats * (rowItem2.AmountInGrams / 100);
                                        Model.CarbohydratesPerDay[Model.DaysOfWeek[i]] += rowItem2.Product.Carbohydrates * (rowItem2.AmountInGrams / 100);
                                        <td style="padding:0px;" class="inactive">
                                            <table style="border:0px;box-shadow:none!important;margin:0px;">
                                                <tr>
                                                    <td style="border:0px;padding:0px;">
                                                        <a class="foodlink" asp-controller="DailyMealRows" asp-action="Edit" asp-route-id="@rowItem.DailyMealRowId">
                                                            <div>
                                                                @{
                                                                    var food = Model.Foods.FirstOrDefault(x => x.FoodId == rowItem.ProductId);
                                                                }
                                                                @($"{food?.FoodName}")<br>
                                                                @($"{rowItem.AmountInGrams:0.###} grams")
                                                            </div>
                                                        </a>
                                                    </td>
                                                    <td style="border:0px;padding:0px;" class="inactive">+</td>
                                                    <td style="border:0px;padding:0px;">
                                                        <a class="foodlink" asp-controller="DailyMealRows" asp-action="Edit" asp-route-id="@rowItem2.DailyMealRowId">
                                                            <div>
                                                                @{
                                                                    var food2 = Model.Foods.FirstOrDefault(x => x.FoodId == rowItem2.ProductId);
                                                                }
                                                                @($"{food2?.FoodName}")<br>
                                                                @($"{rowItem2.AmountInGrams:0.###} grams")
                                                            </div>
                                                        </a>
                                                    </td>
                                                </tr>

                                                @{
                                                    bool hasForthItem = group.Where(x => x.DayOfWeek == Model.DaysOfWeek[i]).Count() > 3;
                                                    bool hasThirdItem = group.Where(x => x.DayOfWeek == Model.DaysOfWeek[i]).Count() > 2;
                                                    DailyMealRow rowItem3 = new DailyMealRow();
                                                    DailyMealRow rowItem4 = new DailyMealRow();
                                                    if (hasForthItem)
                                                    {
                                                        rowItem3 = group.Where(x => x.DayOfWeek == Model.DaysOfWeek[i]).ToArray()[2];
                                                        rowItem4 = group.Where(x => x.DayOfWeek == Model.DaysOfWeek[i]).ToArray()[3];
                                                        Model.CaloriesPerDay[Model.DaysOfWeek[i]] += ((rowItem3.Product.Proteins * (rowItem3.AmountInGrams / 100) * 4) +
                                                        (rowItem3.Product.Fats * (rowItem3.AmountInGrams / 100) * 9) + (rowItem3.Product.Carbohydrates * (rowItem3.AmountInGrams / 100) * 4));
                                                        Model.ProteinsPerDay[Model.DaysOfWeek[i]] += rowItem3.Product.Proteins * (rowItem3.AmountInGrams / 100);
                                                        Model.FatsPerDay[Model.DaysOfWeek[i]] += rowItem3.Product.Fats * (rowItem3.AmountInGrams / 100);
                                                        Model.CarbohydratesPerDay[Model.DaysOfWeek[i]] += rowItem3.Product.Carbohydrates * (rowItem3.AmountInGrams / 100);

                                                        Model.CaloriesPerDay[Model.DaysOfWeek[i]] += ((rowItem4.Product.Proteins * (rowItem4.AmountInGrams / 100) * 4) +
                                                        (rowItem4.Product.Fats * (rowItem4.AmountInGrams / 100) * 9) + (rowItem4.Product.Carbohydrates * (rowItem4.AmountInGrams / 100) * 4));
                                                        Model.ProteinsPerDay[Model.DaysOfWeek[i]] += rowItem4.Product.Proteins * (rowItem4.AmountInGrams / 100);
                                                        Model.FatsPerDay[Model.DaysOfWeek[i]] += rowItem4.Product.Fats * (rowItem4.AmountInGrams / 100);
                                                        Model.CarbohydratesPerDay[Model.DaysOfWeek[i]] += rowItem4.Product.Carbohydrates * (rowItem4.AmountInGrams / 100);
                                                        <tr>
                                                            <td style="border-top:1px solid #ccc; border-bottom: 0px; border-right:0px; border-left:0px; padding:0px;">
                                                                <a class="foodlink" asp-controller="DailyMealRows" asp-action="Edit" asp-route-id="@rowItem3.DailyMealRowId">
                                                                    <div>
                                                                        @rowItem3.Product.FoodName<br>
                                                                        @rowItem3.AmountInGrams grams
                                                                    </div>
                                                                </a>
                                                            </td>
                                                            <td style="border-top:1px solid #ccc; border-bottom: 0px; border-right:0px; border-left:0px; padding:0px;" class="inactive">
                                                                <div>
                                                                    +
                                                                </div>
                                                            </td>
                                                            <td style="border-top:1px solid #ccc; border-bottom: 0px; border-right:0px; border-left:0px; padding:0px;">
                                                                <a class="foodlink" asp-controller="DailyMealRows" asp-action="Edit" asp-route-id="@rowItem4.DailyMealRowId">
                                                                    <div>
                                                                        @rowItem4.Product.FoodName<br>
                                                                        @rowItem4.AmountInGrams grams
                                                                    </div>
                                                                </a>
                                                            </td>
                                                        </tr>
                                                    }
                                                    else if (hasThirdItem)
                                                    {
                                                        rowItem3 = group.Where(x => x.DayOfWeek == Model.DaysOfWeek[i]).ToArray()[2];
                                                        <tr>
                                                            <td style="border-top:1px solid #ccc; border-bottom: 0px; border-right:0px; border-left:0px; padding:0px;" colspan="3">
                                                                <a class="foodlink" asp-controller="DailyMealRows" asp-action="Edit" asp-route-id="@rowItem3.DailyMealRowId">
                                                                    <div>
                                                                        @rowItem3.Product.FoodName<br>
                                                                        @rowItem3.AmountInGrams grams
                                                                    </div>
                                                                </a>
                                                            </td>
                                                        </tr>
                                                    }
                                                }

                                            </table>
                                        </td>


                                    }
                                    else
                                    {
                                        <td>
                                            <a class="foodlink" asp-controller="DailyMealRows" asp-action="Edit" asp-route-id="@rowItem.DailyMealRowId">
                                                <div>
                                                    @{
                                                        var food = Model.Foods.FirstOrDefault(x => x.FoodId == rowItem.ProductId);
                                                    }
                                                    @($"{food?.FoodName}")<br>
                                                    @($"{rowItem.AmountInGrams:0.###} grams")
                                                </div>
                                            </a>
                                        </td>
                                    }


                                }
                                else
                                {
                                    <td class="addTd">
                                        <a asp-controller="DailyMealRows" asp-action="Create" asp-route-EatTime="@group.Key" asp-route-DayOfWeek="@Model.DaysOfWeek[i]" class="foodlink">
                                            <div class="addbutton">Add meal</div>
                                        </a>
                                    </td>

                                }
                            }
                        </tr>
                    }
                    <tr>
                        <th><a asp-controller="DailyMealRows" asp-action="Create" class="text-decoration-none text-black"><div>Add new</div></a></th>
                        @{
                            foreach (var day in Model.DaysOfWeek)
                            {
                                <th>
                                    <a asp-controller="DailyMealRows" asp-action="Create" asp-route-DayOfWeek="@day" class="foodlink">
                                        <div class="addbutton">Add meal here</div>
                                    </a>
                                </th>
                            }
                        }
                    </tr>
                    <tr>
                        <th></th>
                        @{
                            foreach (var day in Model.DaysOfWeek)
                            {
                                <th>
                                    <p>Calories: @String.Format("{0:0.##}", Model.CaloriesPerDay[day])</p>
                                    <p>Proteins: @String.Format("{0:0.##}", Model.ProteinsPerDay[day])</p>
                                </th>
                            }
                        }
                    </tr>
                </tbody>
            </table>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Get all td elements
                var tdElements = document.querySelectorAll('td');

                // Attach click event to each td
                tdElements.forEach(function (td) {
                    td.addEventListener('click', function () {
                        // Get the link from the first anchor inside the td
                        var link = td.querySelector('a');

                        // Navigate to the link if it exists
                        if (link) {
                            window.location.href = link.href;
                        }
                    });
                });
            });
        </script>

    </div>
</div>


@{
    await Html.RenderPartialAsync("_GuidelinesPartial", Model);
}
