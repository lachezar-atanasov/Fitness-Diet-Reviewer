@model Fitness_Diet_Reviewer.ViewModels.AccountViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = Model.ApplicationUser.UserName;
    var currUserSearch = await UserManager.FindByNameAsync(User.Identity.Name);
}

<div class="d-flex flex-column" id="content-wrapper">
    <div id="content">
        <div class="container-fluid">

            @{
                if (User.IsInRole("Administrator") || User.Identity.Name == Model.ApplicationUser.UserName)
                {
                    bool isFitnessInstructor = await UserManager.IsInRoleAsync(Model.ApplicationUser, "Fitness Instructor");
                    if (!isFitnessInstructor && !User.IsInRole("Administrator"))
                    {
                        await Html.RenderPartialAsync("_EdittableFitnessTablePartial", Model);
                    }
                    else if (User.Identity.Name == Model.ApplicationUser.UserName)
                    {
                        await Html.RenderPartialAsync("_EdittableFitnessTablePartial", Model);
                    }
                    else
                    {
                        await Html.RenderPartialAsync("_ViewOnlyFitnessTablePartial", Model);
                    }

                    await Html.RenderPartialAsync("_EditProfilePartial", Model);

                }
                else
                {
                    await Html.RenderPartialAsync("_ViewOnlyFitnessTablePartial", Model);

                            <div class="row mb-3">
                                <div class="col-lg-4">
                                    @{
                                await Html.RenderPartialAsync("_ViewOnlyProfileLeftPartial", Model);
                                    }
                                </div>
                                <div class="col-lg-8">
                                    @{
                                await Html.RenderPartialAsync("_ViewOnlyProfileRightPartial", Model);
                                    }
                                </div>
                            </div>

                }
            }

        </div>
    </div>
</div>

<script type="text/javascript">
            @{
                var totalGrams = Model.ProteinsPerDay.Values.Sum() + Model.CarbohydratesPerDay.Values.Sum() + Model.FatsPerDay.Values.Sum();
                totalGrams = totalGrams == 0 ? 1 : totalGrams;
            }
    $(function () {
        // Assuming Model.ProteinsPerDay.Values.Average(), Model.CarbohydratesPerDay.Values.Average(), and Model.FatsPerDay.Values.Average()
        // are server-side variables representing average percentages on the server.

        var proteinsPercentage = @(String.Format("{0:0.##}", (Model.ProteinsPerDay.Values.Sum() / totalGrams) * 100).Replace(',', '.'));
        var carbohydratesPercentage = @(String.Format("{0:0.##}", (Model.CarbohydratesPerDay.Values.Sum() / totalGrams) * 100).Replace(',', '.'));
        var fatsPercentage = @(String.Format("{0:0.##}", (Model.FatsPerDay.Values.Sum() / totalGrams) * 100).Replace(',', '.'));
            var proteinsGrams = @(String.Format("{0:D}", (Math.Round(Model.ProteinsPerDay.Values.Average())).ToString().Replace(',', '.')));
            var carbohydratesGrams = @(String.Format("{0:D}", (Math.Round(Model.CarbohydratesPerDay.Values.Average()).ToString().Replace(',', '.'))));
            var fatsGrams = @(String.Format("{0:D} ", (Math.Round(Model.FatsPerDay.Values.Average()).ToString().Replace(',', '.'))));
        var chart = new CanvasJS.Chart("chartContainer", {
            title: {
                    text: "Nutrients in %",
            },
            animationEnabled: true,
            theme: "light2",
            data: [
                {
                    type: "pie",
                    showInLegend: true,
                    toolTipContent: "{label} {y}%",
                        legendText: "{label} ({z} grams per day)",
                    dataPoints: [
                            { z: parseFloat(proteinsGrams.toFixed(2)), y: parseFloat(proteinsPercentage.toFixed(2)), label: "Proteins", color: "#0d6efd" },
                            { z: parseFloat(carbohydratesGrams.toFixed(2)), y: parseFloat(carbohydratesPercentage.toFixed(2)), label: "Carbohydrates", color: "#ffc107" },
                            { z: parseFloat(fatsGrams.toFixed(2)), y: parseFloat(fatsPercentage.toFixed(2)), label: "Fats", color: "#dc3545" },
                    ],
                }
            ]
        });
        chart.render();
        $("#chartContainer").addClass("d-none");
    });

</script>
<script>
    $(document).ready(function () {
        // Show chart when "Show chart" is clicked
        $("#showChart").on("click", function () {
            $("#statisticsContent").addClass("d-none");
            $("#chartContainer").removeClass("d-none");
            $("#showChart").addClass("d-none");
            $("#hideChart").removeClass("d-none");
        });

        // Hide chart when "Hide chart" is clicked
        $("#hideChart").on("click", function () {
            $("#statisticsContent").removeClass("d-none");
            $("#chartContainer").addClass("d-none");
            $("#showChart").removeClass("d-none");
            $("#hideChart").addClass("d-none");
        });
    });
</script>